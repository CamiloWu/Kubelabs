
# 13. Extra: HPA (Incluido en Parte II)
[Documentación Oficial](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/)

## 13.1. Ejecutar el archvivo:
> [kubelabs-files-demo/hpa-definition.yml](./kubelabs-files-demo/hpa-definition.yml)

```vim
kubectl apply -f kubelabs-files-demo/hpa-definition.yml
```

Escala de acuerdo a las siguientes métricas:
```yaml
minReplicas: 1
maxReplicas: 10
cpu: 30
memoria: 30
```
## 13.2. Validar:
```vim
kubectl get pods -l run=php-apache
```
```yaml
NAME                          READY   STATUS    RESTARTS   AGE
php-apache-6fff8db564-clkmx   1/1     Running   0          37m
```
> Hay una replica en ejecución.

```vim
kg hpa -w
```
> -w = watch
```vim
NAME         REFERENCE               TARGETS         MINPODS   MAXPODS   REPLICAS
php-apache   Deployment/php-apache   25%/30% 0%/30%  1         10        1
```

> TARGETS: MEM - CPU

## 13.3. En otra terminal, generar tráfico al Pod configurado
```vim
kubectl run -it load-generator --rm --image=busybox --restart=Never -- /bin/sh -c "while sleep 0.01; do wget -q -O- http://php-apache; done"
```
En caso de error, ejecutarlo en dos partes:

```vim
kubectl run -it load-generator --rm --image=busybox --restart=Never
# dentro del contenedor ejecutar:
while sleep 0.01; do wget -q -O- http://php-apache; done
```

El Pod ***load-generator*** envía tráfico al Pod ***php-apache***, eso incrementa el uso de CPU
Validar el autoescalado (HPA):
```vim
kubectl get hpa
```

```yaml
NAME         REFERENCE               TARGETS          MINPODS   MAXPODS   REPLICAS
php-apache   Deployment/php-apache   27%/30%, 70%/30% 1         10        6
```
> Se visualiza el porcentaje del ***TARGET***

> Aumenta la cantidad de replicas.

## 13.4. Detener el pod de carga y limpiar

```vim
kubectl delete all --all
```

> [ScaleDown](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#configurable-scaling-behavior)

